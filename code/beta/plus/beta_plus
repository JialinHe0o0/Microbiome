# Jialin He 202306

beta_plus <- function(microdat,
                      metadata,
                      group,
                      sample_in_row = T,
                      method = 'presence',
                      p.adj = T,
                      p.signif = T,
                      title = NULL,
                      color = NULL,
                      path = NULL,
                      filename1 = 'beta1',
                      filename2 = 'beta2',
                      width = 6.6,
                      height = 5){
  
  if(!require(pacman))install.packages(pacman)
  pacman::p_load(tidyverse,betapart,ggpubr,rstatix,vegan,scico)
  
  if(sample_in_row == F){
    microdat <- t(microdat) %>% as.data.frame()
  }
  
  # 去除所有样本都为0的OTU/ASV/Species/Genus etc.
  microdat <- microdat[,colSums(microdat)>0]
  
  metadata <- metadata[row.names(metadata) %in% row.names(microdat),]
  id <- row.names(metadata)
  microdat <- microdat[id,]
  
  colnames(metadata)[colnames(metadata)==group] <- 'group_in_function'
  
  
  if(method == 'presence'){
    beta_dat <- c()
    label1 <- 'Turnover'
    label2 <- 'Nestedness'
    for(i in unique(metadata$group_in_function)){
      dat_temp <- microdat[metadata$group_in_function == i,]
      # presence/absences (1,0)数据
      dat_temp[dat_temp > 0] = 1
      beta.u <- betapart.core(dat_temp)
      jac <- beta.pair(beta.u,index.family = "jac")
      temp_turnover <- as.matrix(jac$beta.jtu)
      temp_turnover[lower.tri(temp_turnover)] = 0
      temp_turnover <- melt(temp_turnover) %>% filter(value>0)
      
      temp_nestedness <- as.matrix(jac$beta.jne)
      temp_nestedness[lower.tri(temp_nestedness)] = 0
      temp_nestedness <- melt(temp_nestedness) %>% filter(value>0)
      
      dat_temp <- rbind(temp_turnover,temp_nestedness)
      dat_temp$Type <- c(rep("Turnover",nrow(temp_turnover)),
                         rep("Nestedness",nrow(temp_nestedness)))
      dat_temp$Group <- rep(i,nrow(dat_temp))
      beta_dat <- rbind(beta_dat,dat_temp)
    }
  }else if(method == 'abundance'){
    beta_dat <- c()
    label1 <- 'Balanced'
    label2 <- 'Gradients'
    for(i in unique(metadata$group_in_function)){
      dat_temp <- microdat[metadata$group_in_function == i,]
      beta.u <- betapart.core.abund(dat_temp)
      bray <- beta.pair.abund(beta.u,index.family = "bray")
      temp_balanced <- as.matrix(bray$beta.bray.bal)
      temp_balanced[lower.tri(temp_balanced)] = 0
      temp_balanced <- melt(temp_balanced) %>% filter(value>0)
      
      temp_gradients <- as.matrix(bray$beta.bray.gra)
      temp_gradients[lower.tri(temp_gradients)] = 0
      temp_gradients <- melt(temp_gradients) %>% filter(value>0)
      
      dat_temp <- rbind(temp_balanced,temp_gradients)
      dat_temp$Type <- c(rep("Balanced",nrow(temp_balanced)),
                         rep("Gradients",nrow(temp_gradients)))
      dat_temp$Group <- rep(i,nrow(dat_temp))
      beta_dat <- rbind(beta_dat,dat_temp)
    }
  }
  beta_dat$Group <- factor(beta_dat$Group,levels = levels(metadata$group_in_function))
  
  dat1 <- beta_dat[beta_dat$Type == label1,]
  dat2 <- beta_dat[beta_dat$Type == label2,]
  label <- ifelse(p.adj,'p.adj','p')
  signif <- ifelse(p.adj,'p.adj.signif','p.signif')
  
  stat.test1 <- compare_means(value~Group,
                              p.adjust.method = 'BH',
                              symnum.args = list(cutpoints = c(-Inf,0.001,0.01,0.05,Inf), 
                                                 symbols = c('***','**','*','ns')),
                              data = dat1,method = 'wilcox.test') %>% 
    add_significance(cutpoints = c(-Inf,0.001,0.01,0.05,Inf),
                     symbols = c('***','**','*','ns'))
  
  if(p.signif){
    label <- signif
  }else{
    stat.test1[[label]] <- paste0('P = ',round(stat.test1[[label]],3))
  }
  
  stat.test2 <- compare_means(value~Group,
                              p.adjust.method = 'BH',
                              symnum.args = list(cutpoints = c(-Inf,0.001,0.01,0.05,Inf), 
                                                 symbols = c('***','**','*','ns')),
                              data = dat2,method = 'wilcox.test') %>% 
    add_significance(cutpoints = c(-Inf,0.001,0.01,0.05,Inf),
                     symbols = c('***','**','*','ns'))
  if(p.signif){
    label <- signif
  }else{
    stat.test2[[label]] <- paste0('P = ',round(stat.test2[[label]],3))
  }
  
  max1 <- max(dat1$value)
  min1 <- min(dat1$value)
  
  if(is.null(color)){
    color <- scico::scico(n = len,palette = 'berlin')
  }
  
  plot1 <- 
    ggplot(data = dat1,aes(x = Group,
                           y = value,
                           color = Group))+
    geom_boxplot(width = 0.35,size = 0.66,outlier.shape = NA,
                 alpha = 0.9)+
    # geom_jitter(aes(fill = Group),
    #             width = 0.25,shape = 21,
    #             size = 1,alpha = 0.9)+
    # coord_cartesian(ylim = ylim1*1.05)+
    theme_bw()+
    scale_color_manual(values = color)+
    scale_fill_manual(values = color)+
    scale_y_continuous()+
    labs(title = title,x = NULL,y = label1)+
    theme(plot.title=element_text(family = "serif",
                                  size=15,hjust=0),
          legend.position = 'none',
          axis.title.y= element_text(family = "serif",size=15),
          axis.text.x= element_text(family = "serif",size=12),
          axis.text.y= element_text(family = "serif",size=12),
          axis.ticks.length.x = unit(0.1,'cm'),
          axis.ticks.length.y = unit(0.1,'cm'),
          plot.margin = unit(c(0.2,0.2,0.2,0.2),"cm"))+
    # guides(color=guide_legend(override.aes = list(size=2)))+
    stat_pvalue_manual(data = stat.test1,
                       y.position = max1+(max1-min1)/10,
                       family = 'serif',
                       step.increase = 0.09,size = 3.8,
                       tip.length = 0.02,label = label)
  
  max2 <- max(dat2$value)
  min2 <- min(dat2$value)
  
  plot2 <- 
    ggplot(data = dat2,aes(x = Group,
                           y = value,
                           color = Group))+
    geom_boxplot(width = 0.35,size = 0.66,outlier.shape = NA,
                 alpha = 0.9)+
    # geom_jitter(aes(fill = Group),
    #             width = 0.25,shape = 21,
    #             size = 1,alpha = 0.9)+
    # coord_cartesian(ylim = ylim1*1.05)+
    theme_bw()+
    scale_color_manual(values = color)+
    scale_fill_manual(values = color)+
    scale_y_continuous()+
    labs(title = title,x = NULL,y = label2)+
    theme(plot.title=element_text(family = "serif",
                                  size=15,hjust=0),
          legend.position = 'none',
          axis.title.y= element_text(family = "serif",size=15),
          axis.text.x= element_text(family = "serif",size=12),
          axis.text.y= element_text(family = "serif",size=12),
          axis.ticks.length.x = unit(0.1,'cm'),
          axis.ticks.length.y = unit(0.1,'cm'),
          plot.margin = unit(c(0.2,0.2,0.2,0.2),"cm"))+
    # guides(color=guide_legend(override.aes = list(size=2)))+
    stat_pvalue_manual(data = stat.test2,
                       y.position = max2+(max2-min2)/10,
                       family = 'serif',
                       step.increase = 0.09,size = 3.8,
                       tip.length = 0.02,label = label)
  
  list <- list(plot1 = plot1,
               plot2 = plot2,
               dat1 = dat1,
               dat2 = dat2)
  
  if(!is.null(path)){
    ggsave(plot = plot1,
           filename = paste0(path,'/',filename1,'_plot.pdf'),
           width = width,height = height)
    ggsave(plot = plot2,
           filename = paste0(path,'/',filename2,'_plot.pdf'),
           width = width,height = height)
  }
  
  return(list)
  
}


